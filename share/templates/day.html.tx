: cascade base { title => "Tagesplanung", nav => "planner" }
: override content -> {

<div id="pwmpicker"></div>
<svg id="dayplanner"></svg>
<hr>
<div class="form noautoload" id="dayplan"></div>

: }
: override postjs -> {

<script type="text/javascript">

// First execute stuff when the form is loaded
$('body').on('sr_config',function(){

  var dayplanner_pwms = new Array();
  var keys = new Array();
  
  for (i = 1; i <= sr_config["pwm_count"]; i++) { 
    keys.push('pwm#' + i + '#manager');
  }

  sr_request_mpack('POST','/',keys,function(values){
    for (i = 1; i <= sr_config["pwm_count"]; i++) { 
      var key = 'pwm#' + i + '#manager';
      if (values[key] == 1) {
        dayplanner_pwms.push(i);
      }
    }
    if (!dayplanner_pwms.length) {
      window.location.href = window.location.href.replace("day.html","led.html");
    } else {
      var fields = new Array();
      $.each(dayplanner_pwms,function(i,pwm){
        fields.push({
          name: "marker#" + pwm,
          // pre: true
          label: "led " + pwm
        });
      });
      fields.push({
        name: "randomdeferralmax",
        label: "Maximale zuf&auml;llige Abweichung in Minuten"
      },{
        name: "deferral",
        label: "Feste Abweichung in Minuten"
      });
      var form = new SrForm($('#dayplan'),{
        title: "Tagesplanung",
        prefix: "dayplanner",
        fields: fields
      });

      var s = Snap('#dayplanner');
      sr_day_makegrid(s);

    }
  });

  // $("#dayplan").each(function(){
  //   var fields = [];
  //   for (i = 1; i <= sr_config["pwm_count"]; i++) { 
  //     fields.push({
  //       name: "marker#" + i,
  //       label: "Tagesverlauf LED #" + i,
  //       type: "marker"
  //     });
  //   }
  //   sr_make_form(this,{
  //     formtitle: "Tagesplannung",
  //     prefix: "dayplanner",
  //     fields: fields
  //   });
  // });

  // 'use strict';

  // var s = Snap('#dayplanner');
  // var width = $('#dayplanner').width() - 2;

  // //box and lines
  // s.attr({
  //   viewBox: "0 0 950 300",
  // });

  // var sixhours = ( (width - 35) - 8 ) / 4;
  // var sixoclock = s.paper.line(39+sixhours,12,39+sixhours,266).attr({
  //   strokeWidth: 1,
  //   stroke: "#ebebeb"
  // });
  // var twelveoclock = s.paper.line(39+(sixhours*2),12,39+(sixhours*2),266).attr({
  //   strokeWidth: 1,
  //   stroke: "#ebebeb"
  // });
  // var eighteenoclock = s.paper.line(39+(sixhours*3),12,39+(sixhours*3),266).attr({
  //   strokeWidth: 1,
  //   stroke: "#ebebeb"
  // });

  // var lines = [];
  // for (var i = 1; i < 10; i++) {
  //   lines.push(s.paper.line(
  //     35,14+(25*i),width,14+(25*i)
  //   ).attr({ strokeWidth: 1, stroke: "#ebebeb" }));
  // }

  // //percent text
  // for (var i = 1; i < 10; i++) {
  //   s.text(7, 16 + 25 * i, 100-10*i).attr({ "font-size": "14px", fill:"#707070" });
  // }
  // s.text(0, 16, "100").attr({ "font-size": "14px", fill:"#707070" });
  // s.text(15, 268, "  0").attr({ "font-size": "14px", fill:"#707070" });

  // //time text
  // s.text(25, 290, "0h").attr({ "font-size": "14px", fill:"#707070" });
  // s.text(30+(sixhours*1), 290, "6h").attr({ "font-size": "14px", fill:"#707070" });
  // s.text(30+(sixhours*2), 290, "12h").attr({ "font-size": "14px", fill:"#707070" });
  // s.text(30+(sixhours*3), 290, "18h").attr({ "font-size": "14px", fill:"#707070" });
  // s.text(20+(sixhours*4), 290, "24h").attr({ "font-size": "14px", fill:"#707070" });

  // var midnighth =  267;
  // var sixh =  10;
  // var twelveh =  267;
  // var eighteenh =  267;
  // var twentyfourh =  267;
  // var graph = s.paper.line(700,100,300,150);
  // var graph = s.paper.polygon(39,267,39,midnighth,39+(sixhours*1),sixh,39+(sixhours*2),twelveh,39+(sixhours*3),eighteenh,39+(sixhours*4),twentyfourh,39+(sixhours*4),267);

  // graph.attr({
  //   id: 'graph',
  //   fill: "#bed8ea",
  //   strokeWidth: 2,
  //   stroke: "#2980B9",
  // });

  // //border

  // var border = s.rect(35,11,width - 35,256);
  // border.attr({
  //   fill: "none",
  //   strokeWidth: 1,
  //   stroke: "#cdcdcd"
  // });

//  //graph buttons
//  
//  var buttonMidnight = s.rect(34, midnighth - 5, 10, 10, 20, 20);
//  var buttonSix = s.rect(34+(sixhours), sixh - 5, 10, 10, 20, 20);
//  var buttonTwelve = s.rect(34+(sixhours*2), twelveh - 5, 10, 10, 20, 20);
//  var buttonEighteen = s.rect(34+(sixhours*3), eighteenh - 5, 10, 10, 20, 20);
//  var buttonTwentyfour = s.rect(34+(sixhours*4), twentyfourh - 5, 10, 10, 20, 20);
//
//  buttonTwentyfour.attr({
//    fill: "#ffffff",
//    strokeWidth: 2,
//    stroke: "#a1c7e0"
//  });
//
//  var orig0 = {
//      x: 34,
//      y: 262
//  };
//  var orig6 = {
//      x: 34+(sixhours),
//      y: 262
//  };
//  var orig12 = {
//      x: 34+(sixhours*2),
//      y: 262
//  };
//  var orig18 = {
//      x: 34+(sixhours*3),
//      y: 262
//  };
//  var orig24 = {
//      x: 34+(sixhours*4),
//      y: 262
//  };
//
//  buttonMidnight.drag(
//    function (dx, dy, x, y, e) {
//        var xSnap = Snap.snapTo(34,34);
//        var ySnap = Snap.snapTo(1, orig0.y + dy, 100000000);
//        this.attr({
//            x: xSnap,
//            y: ySnap + 10
//        });
//    },
//    function (x, y, e) {
//        orig0.x = e.toElement.x.baseVal.value;
//        orig0.y = e.toElement.y.baseVal.value;
//    }
//  );
//  buttonSix.drag(
//    function (dx, dy, x, y, e) {
//        var xSnap = Snap.snapTo(34+sixhours,34+sixhours);
//        var ySnap = Snap.snapTo(1, orig6.y + dy, 100000000);
//        this.attr({
//            x: xSnap,
//            y: ySnap + 10
//        });
//    },
//    function (x, y, e) {
//        orig6.x = e.toElement.x.baseVal.value;
//        orig6.y = e.toElement.y.baseVal.value;
//    }
//  );
//  buttonTwelve.drag(
//    function (dx, dy, x, y, e) {
//        var xSnap = Snap.snapTo(34+(sixhours*2),34+(sixhours*2));
//        var ySnap = Snap.snapTo(1, orig12.y + dy, 100000000);
//        this.attr({
//            x: xSnap,
//            y: ySnap + 10
//        });
//    },
//    function (x, y, e) {
//        orig12.x = e.toElement.x.baseVal.value;
//        orig12.y = e.toElement.y.baseVal.value;
//    }
//  );
//  buttonEighteen.drag(
//    function (dx, dy, x, y, e) {
//        var xSnap = Snap.snapTo(34+(sixhours*3),34+(sixhours*3));
//        var ySnap = Snap.snapTo(1, orig18.y + dy, 100000000);
//        this.attr({
//            x: xSnap,
//            y: ySnap + 10
//        });
//    },
//    function (x, y, e) {
//        orig18.x = e.toElement.x.baseVal.value;
//        orig18.y = e.toElement.y.baseVal.value;
//    }
//  );
//  buttonTwentyfour.drag(
//    function (dx, dy, x, y, e) {
//        var xSnap = Snap.snapTo(34+(sixhours*4),34+(sixhours*4));
//        var ySnap = Snap.snapTo(1, orig24.y + dy, 100000000);
//        this.attr({
//            x: xSnap,
//            y: ySnap + 10
//        });
//    },
//    function (x, y, e) {
//        orig24.x = e.toElement.x.baseVal.value;
//        orig24.y = e.toElement.y.baseVal.value;
//    },
//    function (twentyfourh) {
//	twentyfourh = 40	
//    }
//  );
//
// // var midnighth =  37;
// // var sixh =  10;
// // var twelveh =  67;
// // var eighteenh =  267;
// // var twentyfourh =  267;
//
//  buttonSix.attr({
//    fill: "#ffffff",
//    strokeWidth: 2,
//    stroke: "#a1c7e0"
//  });
//  buttonTwelve.attr({
//    fill: "#ffffff",
//    strokeWidth: 2,
//    stroke: "#a1c7e0"
//  });
//  buttonEighteen.attr({
//    fill: "#ffffff",
//    strokeWidth: 2,
//    stroke: "#a1c7e0"
//  });
//  buttonMidnight.attr({
//    fill: "#ffffff",
//    strokeWidth: 2,
//    stroke: "#a1c7e0"
//  });

});

function sr_day_makegrid(s){
  
  var dataLength = 4;
  var maxValue = 100;
  var minValue = 0;
  
  console.log($('#dayplanner').height());
  
  // Creates the vertical lines in the graph
  for (var i=0; i<dataLength; i++) {
    var x = i*100;
    var xLine = s.line(x, minValue-10, x, maxValue+10).attr({
      stroke: "#ccc",
      strokeWidth: 0.25
    });
  }
  
  // Creates the horizontal lines in the graph
  var w = dataLength*100;
  var delimiter = 50;
  var values = (maxValue+10)-(minValue-10);
  var offset = ((maxValue+10)%delimiter);
  for (var i=values; i > 0; i--){
    if ((i-offset) % delimiter === 0){ // Change where lines appear by changing the delimiter (10 for every 10 units, 50 for 50, etc.)
      var yLine = s.line(0, i, w, i).attr({
        stroke: '#ccc',
        strokeWidth: 0.25
      });
    }
  }

}

  // function convertToPath(points){
  //   var path = '';
    
  //   for (var i=0; i<points.length; i++){
  //     var x = i*100;
  //     var y = -points[i]+$('#svgLine').height(); // Convert points to how we like to view graphs
  //     if (i===0){
  //       path += 'M'+x+','+y+' R';
  //     }
  //     else if (i===points.length-1){
  //       path += x+','+y;
  //     }
  //     else {
  //       path += x+','+y+',';
  //     }
  //   }
  //   return path;
  // }
 
  // function makePath(data, color){
  //   var pathString = convertToPath(data);
  //   var graphHeight = $('#svgLine').height();
  //   var fillString = pathString+' V'+graphHeight+' H0 Z';
    
  //   function getDefaultPath(isFill){
  //     var defaultPathString = 'M0,'+graphHeight+' H';
      
      
  //     for (var i=0; i<data.length; i++) {
  //       if (i!==0){ 
  //         defaultPathString += i*100+' ';
  //       }
  //     }
      
  //     if(isFill){
  //       defaultPathString += 'V'+graphHeight+' H0 Z';
  //     }
  //     return defaultPathString;
  //   }
    
  //   var path = s.path(getDefaultPath()).attr({
  //     stroke: color,
  //     strokeWidth: 2,
  //     fill: 'transparent'
  //   });
  
  //   var fill = s.path(getDefaultPath(true)).attr({
  //     fill: color,
  //     fillOpacity: 0.25    
  //   });
  
  //   path.animate({ path: pathString },500);
  //   fill.animate({ path: fillString },500);
    
  // }
  
  // makePath(points1, 'red');
  // makePath(points2, 'blue');
  
  // $('#add-green').on('click', function(){
  //   makePath(points3,'green');
  // });
  

</script>

: }
