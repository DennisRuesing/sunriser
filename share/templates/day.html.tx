: cascade base { title => "Tagesplanung", nav => "planner" }
: override content -> {

<div id="pwmpicker"></div>
<svg id="dayplanner"></svg>
<div class="form noautoload" id="dayplan"></div>

: }
: override postjs -> {

<script type="text/javascript">

var day_selector = '#dayplanner';

var alldaymin  = 1440;
var gridZeroX  = 0;
var gridZeroY  = 0;
var gridSize   = 4;
var maxValue   = 100;
var minValue   = 0;
var timeScale  = 5;
var maxTime    = alldaymin / timeScale;
var minTime    = 0;
var paths      = {};
var scale      = 1;

var SrMarker = Class.extend({

  daymin: undefined,
  percent: undefined,

  init: function(daymin,percent) {
    this.daymin = daymin;
    this.percent = percent;
  }

});

var SrPath = Class.extend({

  markers: undefined,
  size: undefined,
  pwm: undefined,
  color: '#000',
  lines: [],
  circles: [],

  init: function(pwm,markers) {
    this.pwm      = pwm;
    this.markers  = markers;
    this.size     = markers.length;
    var color_id = $('#pwm_' + pwm + '_color').val();
    if (sr_color[color_id]) {
      this.color = sr_color[color_id].color;
    }
  },

  all_points: function() {
    var self = this;
    var points = [];
    var first_time = self.markers[0].daymin;
    var first_value = self.markers[0].percent;
    var last_id = self.size - 1;
    var last_time = self.markers[last_id].daymin;
    var last_value = self.markers[last_id].percent;
    points.push({
      time: Math.ceil(( 0 - ( alldaymin - last_time ) ) / timeScale),
      value: last_value,
      marker: last_id
    });
    for (i = 0; i < self.size; i++) { 
      points.push({
        time: Math.ceil(self.markers[i].daymin / timeScale),
        value: self.markers[i].percent,
        marker: i
      });
    }
    points.push({
      time: Math.ceil(( alldaymin + first_time ) / timeScale),
      value: first_value,
      marker: 0
    });
    return points;
  }

});

var paper      = Snap(day_selector);
var grid_group = paper.g();
var path_group = paper.g();

// First execute stuff when the form is loaded
$('body').on('sr_config',function(){

  var dayplanner_pwms = new Array();
  var keys = new Array();
  
  for (i = 1; i <= sr_config["pwm_count"]; i++) { 
    keys.push('pwm#' + i + '#manager');
  }

  sr_request_mpack('POST','/',keys,function(values){
    for (i = 1; i <= sr_config["pwm_count"]; i++) { 
      var key = 'pwm#' + i + '#manager';
      if (values[key] == 1) {
        dayplanner_pwms.push(i);
      }
    }
    if (!dayplanner_pwms.length) {
      window.location.href = window.location.href.replace("day.html","led.html");
    } else {
      var fields = new Array();
      var expert_fields = new Array();
      $.each(dayplanner_pwms,function(i,pwm){
        fields.push({
          name: "dayplanner#marker#" + pwm,
          transform_value: function(value) { return parseInt(value); },
          // pre: true
          label: "led " + pwm
        });
        fields.push({
          name: "pwm#" + pwm + "#color",
          // pre: true
          label: "led " + pwm + " color"
        });
      });
      expert_fields.push({
        name: "dayplanner#randomdeferralmax",
        template: "slider",
        min: 0, max: 1440,
        label: "Maximale zuf&auml;llige Abweichung in Minuten"
      },{
        name: "dayplanner#deferral",
        template: "slider",
        min: -1440, max: 1440,
        label: "Feste Abweichung in Minuten"
      });
      var form = new SrForm($('#dayplan'),{
        title: undefined,
        fields: fields,
        expert_fields: expert_fields,
        loaded: function(){
          var markers = {};
          $.each(this.values(),function(k,v){
            var matches;
            if (matches = k.match(/^dayplanner#marker#(\d+)$/)) {
              var pwm = matches[1];
              markers[pwm] = [];
              for (var i = 0; i < v.length; i++, i++) {
                markers[pwm].push(new SrMarker(v[i],v[i+1]));
              }
            }
          });
          sr_dayplanner_load(markers);
        }
      });

    }
  });

});

function sr_day_scale() {
  var curWidth = $(day_selector).width();
  scale = maxTime / curWidth;
  var matrix = new Snap.Matrix();
  matrix.scale(1/scale);
  grid_group.transform(matrix);
  path_group.transform(matrix);
  $(day_selector).css({ height: Math.ceil(grid_group.getBBox().height) });
}

function sr_dayplanner_load(pwm_markers){

  $(window).resize(function() {
    sr_day_scale();
  });

  for (var i = 0; i <= gridSize; i++) {
    var x = i * ((maxTime - minTime) / gridSize);
    var xLine = paper.line(gridZeroX + x, gridZeroY + minValue, gridZeroX + x, gridZeroY + maxValue).attr({
      stroke: "#ccc",
      class: "gridline"
    });
    grid_group.add(xLine);
  }

  // Creates the vertical lines in the graph
  for (var i = 0; i <= gridSize; i++) {
    var y = i * ((maxValue - minValue) / gridSize);
    var yLine = paper.line(gridZeroX + minTime, gridZeroY + y, gridZeroX + maxTime, gridZeroY + y).attr({
      stroke: "#ccc",
      class: "gridline"
    });
    grid_group.add(yLine);
  }

  $.each(pwm_markers,function(pwm,markers){
    paths[pwm] = new SrPath(pwm,markers);
  });

  $.each(paths,function(pwm,path){
    var points = path.all_points();
    for (var i = 0; i <= path.size; i++) {
      var line = paper.line(
        gridZeroX + points[i].time, gridZeroY + ( maxValue - points[i].value ),
        gridZeroX + points[i+1].time, gridZeroY + ( maxValue - points[i+1].value )
      ).attr({
        stroke: path.color,
        class: "dayline"
      });
      console.log(line);
      path_group.add(line);
      path.lines.push(line);
      if (i > 0) {
        var preline = path.lines[i-1];
        var preline_x = preline.attr('x1');
        var preline_y = preline.attr('y1');
        var line_x = line.attr('x2');
        var line_y = line.attr('y2');
        console.log(preline_x,preline_y,line_x,line_y);
        var time = points[i].time;
        var value = points[i].value;
        var mins = time * timeScale;
        var hour = Math.floor( mins / 60);
        var min = mins - ( hour * 60 );
        var x = gridZeroX + time;
        var y = gridZeroY + ( maxValue - value );
        var circle = paper.circle(x,y,2).attr({
          fill: path.color,
          class: "daycircle",
          title: hour + ":" + ( min < 10 ? "0" : "" ) + min + " " + value + "%"
        });
        circle.data('preline',preline);
        circle.data('line',line);
        var moveFunc = function (dx, dy, posx, posy) {
          var newx = x + ( dx * scale );
          var newy = y + ( dy * scale );
          this.data('preline').attr({ "x2": newx, "y2": newy });
          this.data('line').attr({ "x1": newx, "y1": newy });
          this.attr({ cx: newx , cy: newy });
        };
        circle.drag( moveFunc,
                  function(){
                      console.log("Move started");
                  },
                  function(){
                      console.log("Move stopped");
                  }
          );
        path_group.add(circle);
        path.circles.push(circle);
      }
    }
  });

  sr_day_scale();

}

</script>

: }
