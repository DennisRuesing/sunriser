: cascade base { title => "Tagesplanung", nav => "planner" }
: override content -> {

<div id="pwmpicker"></div>
<svg id="dayplanner"></svg>
<div class="form noautoload" id="dayplan"></div>

: }
: override postjs -> {

<script type="text/javascript">

var SrDayplanner = Class.extend({

  alldaymin:    1440,
  zeroX:        0,
  zeroY:        0,
  gridSize:     4,
  maxValue:     100,
  minValue:     0,
  timeScale:    5,
  maxTime:      undefined,
  minTime:      0,
  paths:        {},

  jq:           undefined,
  paper:        undefined,
  grid_group:   undefined,
  path_group:   undefined,
  currScale:    undefined,
  matrix:       undefined,

  init: function(selector,pwm_markers){
    var self = this;
    self.maxTime = self.alldaymin / self.timeScale;
    self.jq = $(selector);
    self.paper = Snap(selector);
    self.grid_group = self.paper.g();
    self.path_group = self.paper.g();
    self.make_grid();
    $.each(pwm_markers,function(pwm,markers){
      self.paths[pwm] = new SrPath(self,pwm,markers);
    });
    $(window).resize(function() {
      self.scale();
    });
    self.scale();
  },

  make_grid: function(){
    var self = this;

    for (var i = 0; i <= self.gridSize; i++) {
      var x = i * ((self.maxTime - self.minTime) / self.gridSize);
      var xLine = self.paper.line(self.zeroX + x, self.zeroY + self.minValue, self.zeroX + x, self.zeroY + self.maxValue).attr({
        stroke: "#ccc",
        class: "gridline"
      });
      self.grid_group.add(xLine);
    }

    for (var i = 0; i <= self.gridSize; i++) {
      var y = i * ((self.maxValue - self.minValue) / self.gridSize);
      var yLine = self.paper.line(self.zeroX + self.minTime, self.zeroY + y, self.zeroX + self.maxTime, self.zeroY + y).attr({
        stroke: "#ccc",
        class: "gridline"
      });
      self.grid_group.add(yLine);
    }
  },

  scale: function(){
    var self = this;
    var curWidth = self.jq.width();
    if (self.matrix) {
      var invert = self.matrix.invert();
      self.grid_group.transform(invert);
      self.path_group.transform(invert);
    } else {
      self.matrix = new Snap.Matrix();
    }
    self.currScale = self.maxTime / curWidth;
    self.matrix.scale(1 / self.currScale);
    self.grid_group.transform(self.matrix);
    self.path_group.transform(self.matrix);
    self.jq.css({ height: Math.ceil(self.grid_group.getBBox().height) });
  }

});

var SrMarker = Class.extend({

  daymin: undefined,
  percent: undefined,

  init: function(daymin,percent) {
    this.daymin = daymin;
    this.percent = percent;
  }

});

var SrPath = Class.extend({

  markers: undefined,
  size: undefined,
  pwm: undefined,
  dp: undefined,
  path: undefined,
  color: '#000',
  lines: [],
  circles: [],

  init: function(dp,pwm,markers) {
    this.dp       = dp;
    this.pwm      = pwm;
    this.markers  = markers;
    this.size     = markers.length;
    var color_id = $('#pwm_' + pwm + '_color').val();
    if (sr_color[color_id]) {
      this.color = sr_color[color_id].color;
    }
    this.update_svg();
  },

  update_form: function() {
    var self = this;
    var values = [];
    $.each(self.markers,function(i,marker){
      values.push(marker.daymin,marker.percent);
    });
    $('#dayplanner_marker_' + self.pwm).val(values.join(','));
  },

  update_svg: function() {
    var self = this;
    var pwm = self.pwm;
    if (typeof self.path !== 'undefined') {
      self.path.remove();
    }
    $.each(self.circles,function(i,circle){
      circle.remove();
    });
    self.circles = [];
    var points = self.all_points();
    var path_points = [];
    for (var i = 0; i <= self.size + 1; i++) {
      path_points.push([ self.dp.zeroX + points[i].time, self.dp.zeroY + ( self.dp.maxValue - points[i].value ) ].join(" "));
      if (i > 0 && i <= self.size) {
        var time = points[i].time;
        var value = points[i].value;
        var mins = self.markers[i-1].daymin;
        var hour = Math.floor( mins / 60);
        var min = mins - ( hour * 60 );
        var x = self.dp.zeroX + time;
        var y = self.dp.zeroY + ( self.dp.maxValue - value );
        var title = "PWM #" + pwm + "\n" + hour + ":" + ( min < 10 ? "0" : "" ) + min + " " + value + "%";
        var circle = self.dp.paper.circle(x,y,2).attr({
          fill: self.color,
          'fill-opacity': 1,
          class: "daycircle",
          title: title,
          point_id: i,
        });
        circle.append(Snap.parse("<title>" + title + "</title>"));
        circle.dragger = {
          prev_marker: ( i > 1 ? self.markers[i-2] : undefined ),
          next_marker: ( i < self.size ? self.markers[i] : undefined ),
          marker: self.markers[i-1],
          orig_x: undefined,
          orig_y: undefined,
          orig_daymin: undefined,
          orig_percent: undefined,
          move: function (dx, dy, posx, posy) {
            var time     = (posx - this.dragger.orig_x) * self.dp.currScale * self.dp.timeScale;
            var value    = ( (this.dragger.orig_y - posy) * self.dp.currScale );
            value        = ( value > 0 ? Math.ceil(value) : Math.floor(value) );
            time         = ( time  > 0 ? Math.ceil(time)+1  : Math.floor(time)-1  );
            var newtime  = this.dragger.orig_daymin + time;
            var newvalue = this.dragger.orig_percent + value;
            if (newvalue > self.dp.maxValue) {
              newvalue = self.dp.maxValue;
            } else if (newvalue < 0) {
              newvalue = 0;
            }
            if (newtime > self.dp.alldaymin) {
              newtime = self.dp.alldaymin;
            } else if (newtime < 0) {
              newtime = 0;
            }
            if (typeof this.dragger.prev_marker !== 'undefined') {
              if (newtime <= this.dragger.prev_marker.daymin) {
                newtime = this.dragger.prev_marker.daymin + 1;
              }
            }
            if (typeof this.dragger.next_marker !== 'undefined') {
              if (newtime >= this.dragger.next_marker.daymin) {
                newtime = this.dragger.next_marker.daymin - 1;
              }
            }
            this.dragger.marker.daymin  = newtime;
            this.dragger.marker.percent = newvalue;
            self.update_svg();
          },
          start: function(posx,posy,ev) {
            this.dragger.orig_x = posx;
            this.dragger.orig_y = posy;
            this.dragger.orig_daymin  = this.dragger.marker.daymin;
            this.dragger.orig_percent = this.dragger.marker.percent;
          },
          stop: function(ev) {
            self.update_form();
          }
        };
        circle.drag(circle.dragger.move,circle.dragger.start,circle.dragger.stop);
        self.dp.path_group.add(circle);
        self.circles.push(circle);
      }
    }
    self.path = self.dp.paper.path(
      "M " + ( self.dp.zeroX + points[0].time ) + " " + ( self.dp.zeroY + self.dp.maxValue ) + " " +
      "L " + path_points.join(",") + ", " + ( self.dp.zeroX + points[self.size+1].time ) + " " + ( self.dp.zeroY + self.dp.maxValue ) + "Z"
    ).attr({
      fill: self.color,
      'fill-opacity': 0.3
    });
    self.dp.path_group.add(self.path);
    $.each(self.circles,function(i,circles){
      self.path.appendTo(circle);
      self.path.prependTo(self.dp.grid_group);
    });
  },

  all_points: function() {
    var self = this;
    var points = [];
    var first_time = self.markers[0].daymin;
    var first_value = self.markers[0].percent;
    var last_id = self.size - 1;
    var last_time = self.markers[last_id].daymin;
    var last_value = self.markers[last_id].percent;
    points.push({
      time: Math.ceil(( 0 - ( self.dp.alldaymin - last_time ) ) / self.dp.timeScale),
      value: last_value,
      marker: last_id
    });
    for (i = 0; i < self.size; i++) { 
      points.push({
        time: Math.ceil(self.markers[i].daymin / self.dp.timeScale),
        value: self.markers[i].percent,
        marker: i
      });
    }
    points.push({
      time: Math.ceil(( self.dp.alldaymin + first_time ) / self.dp.timeScale),
      value: first_value,
      marker: 0
    });
    return points;
  }

});

var day_selector = '#dayplanner';
var dayplanner_obj;

// First execute stuff when the form is loaded
$('body').on('sr_config',function(){

  var dayplanner_pwms = new Array();
  var keys = new Array();
  
  for (i = 1; i <= sr_config["pwm_count"]; i++) { 
    keys.push('pwm#' + i + '#manager');
  }

  sr_request_mpack('POST','/',keys,function(values){
    for (i = 1; i <= sr_config["pwm_count"]; i++) { 
      var key = 'pwm#' + i + '#manager';
      if (values[key] == 1) {
        dayplanner_pwms.push(i);
      }
    }
    if (!dayplanner_pwms.length) {
      window.location.href = window.location.href.replace("day.html","led.html");
    } else {
      var fields = new Array();
      var expert_fields = new Array();
      $.each(dayplanner_pwms,function(i,pwm){
        fields.push({
          name: "dayplanner#marker#" + pwm,
          transform_value: function(value) { return parseInt(value); },
          pre: true
          //label: "led " + pwm
        });
        fields.push({
          name: "pwm#" + pwm + "#color",
          pre: true
          //label: "led " + pwm + " color"
        });
      });
      expert_fields.push({
        name: "dayplanner#randomdeferralmax",
        template: "slider",
        min: 0, max: 1440,
        label: "Maximale zuf&auml;llige Abweichung in Minuten"
      },{
        name: "dayplanner#deferral",
        template: "slider",
        min: -1440, max: 1440,
        label: "Feste Abweichung in Minuten"
      });
      var form = new SrForm($('#dayplan'),{
        title: undefined,
        fields: fields,
        expert_fields: expert_fields,
        loaded: function(){
          var markers = {};
          $.each(this.values(),function(k,v){
            var matches;
            if (matches = k.match(/^dayplanner#marker#(\d+)$/)) {
              var pwm = matches[1];
              markers[pwm] = [];
              for (var i = 0; i < v.length; i++, i++) {
                markers[pwm].push(new SrMarker(v[i],v[i+1]));
              }
            }
          });
          dayplanner_obj = new SrDayplanner(day_selector,markers);
        }
      });

    }
  });

});

</script>

: }
